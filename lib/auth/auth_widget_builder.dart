import 'package:fluggle_app/models/user/fluggle_user.dart';
import 'package:fluggle_app/services/auth/firebase_auth_service.dart';
import 'package:fluggle_app/services/database/firestore_database.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

/// Used to create user-dependent objects that need to be accessible by all widgets.
/// This widgets should live above the [MaterialApp].
/// See [AuthWidget], a descendant widget that consumes the snapshot generated by this builder.
class AuthWidgetBuilder extends StatelessWidget {
  const AuthWidgetBuilder({Key? key, required this.builder, required this.databaseBuilder}) : super(key: key);
  final Widget Function(BuildContext, AsyncSnapshot<FluggleUser?>) builder;
  final FirestoreDatabase Function(BuildContext context, String uid) databaseBuilder;

  @override
  Widget build(BuildContext context) {
    final authService = Provider.of<FirebaseAuthService>(context, listen: false);

    return StreamBuilder<FluggleUser?>(
      stream: authService.onAuthStateChanged,
      builder: (BuildContext context, AsyncSnapshot<FluggleUser?> snapshot) {
        final FluggleUser? user = snapshot.data;
        if (user != null) {
          return MultiProvider(
            providers: [
              Provider<FluggleUser>.value(value: user),
              Provider<FirestoreDatabase>(
                create: (context) => databaseBuilder(context, user.uid),
              ),
              // NOTE: Any other user-bound providers here can be added here
            ],
            child: builder(context, snapshot),
          );
        }
        return builder(context, snapshot);
      },
    );
  }
}
